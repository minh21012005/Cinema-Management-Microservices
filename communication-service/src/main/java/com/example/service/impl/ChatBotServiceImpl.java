package com.example.service.impl;

import com.example.domain.entity.ChatMessage;
import com.example.domain.entity.ChatSession;
import com.example.domain.entity.FAQ;
import com.example.domain.enums.MessageSender;
import com.example.domain.enums.MessageType;
import com.example.domain.request.ChatMessageReqDTO;
import com.example.domain.response.ChatMessageResDTO;
import com.example.mapper.ChatMessageMapper;
import com.example.repository.ChatMessageRepository;
import com.example.repository.FaqRepository;
import com.example.service.ChatBotService;
import com.example.service.ChatMessageService;
import com.example.service.ChatSessionService;
import com.example.service.internal.CinemaToolService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class ChatBotServiceImpl implements ChatBotService {

    private final ChatMessageRepository messageRepository;
    private final ChatSessionService chatSessionService;
    private final ChatMessageService chatMessageService;
    private final ChatMessageMapper messageMapper;
    private final FaqRepository faqRepository;
    private final ChatClient chatClient;
    private final CinemaToolService cinemaToolService;

    @Override
    @Transactional
    public ChatMessageResDTO handleUserMessage(ChatMessageReqDTO req) {
        // 1Ô∏è‚É£ T√¨m ho·∫∑c t·∫°o session
        ChatSession session = chatSessionService.findOrCreateSession(req);

        // 2Ô∏è‚É£ L∆∞u tin nh·∫Øn user
        ChatMessage userMsg = messageMapper.toEntity(req);
        userMsg.setSession(session);
        userMsg.setSender(MessageSender.USER);
        userMsg.setType(MessageType.AI_GENERATED);
        messageRepository.save(userMsg);

        // 3Ô∏è‚É£ Ki·ªÉm tra FAQ tr√πng kh·ªõp
        List<FAQ> relatedFaqs = faqRepository.searchByKeyword(req.getContent());

        if (!relatedFaqs.isEmpty()) {
            // 3.1Ô∏è‚É£ T·∫°o danh s√°ch FAQ cho AI ch·ªçn c√¢u tr·∫£ l·ªùi h·ª£p l√Ω nh·∫•t
            String faqList = relatedFaqs.stream()
                    .map(f -> "- " + f.getQuestion() + ": " + f.getAnswer())
                    .reduce("", (a, b) -> a + "\n" + b);

            var faqResponse = chatClient.prompt()
                    .system("""
                    B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa r·∫°p chi·∫øu phim CNM Cinemas.
                    D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQ).
                    H√£y ƒë·ªçc danh s√°ch n√†y v√† ch·ªçn ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p nh·∫•t v·ªõi c√¢u h·ªèi ng∆∞·ªùi d√πng.
                    N·∫øu kh√¥ng c√≥ c√¢u n√†o th·∫≠t s·ª± ph√π h·ª£p, h√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn r·∫±ng b·∫°n kh√¥ng ch·∫Øc v√† s·∫Ω ki·ªÉm tra th√™m.
                    """)
                    .user("C√¢u h·ªèi ng∆∞·ªùi d√πng: " + req.getContent() + "\n\nDanh s√°ch FAQ:\n" + faqList)
                    .call();

            String faqAnswer = faqResponse.content();
            if (faqAnswer != null && !faqAnswer.isBlank()) {
                String normalized = faqAnswer.toLowerCase();

                // N·∫øu AI n√≥i m∆° h·ªì ‚Üí b·ªè qua FAQ, chuy·ªÉn xu·ªëng g·ªçi tool
                if (normalized.contains("kh√¥ng ch·∫Øc")
                        || normalized.contains("kh√¥ng r√µ")
                        || normalized.contains("ki·ªÉm tra th√™m")
                        || normalized.contains("kh√¥ng t√¨m th·∫•y")
                        || normalized.contains("xin l·ªói")) {
                    log.info("FAQ kh√¥ng ch·∫Øc ch·∫Øn, chuy·ªÉn xu·ªëng x·ª≠ l√Ω b·∫±ng tool...");
                } else {
                    return chatMessageService.saveBotMessage(session, faqAnswer.trim(), MessageType.FAQ_STATIC);
                }
            }
        }

        // 4Ô∏è‚É£ Build l·ªãch s·ª≠ h·ªôi tho·∫°i (context)
        List<ChatMessage> messages = messageRepository.findBySessionOrderByCreatedAtAsc(session);

        // 5Ô∏è‚É£ T·∫°o system prompt
        String systemPrompt = """
                B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa r·∫°p chi·∫øu phim CNM Cinemas.
                M·ª•c ti√™u c·ªßa b·∫°n l√† h·ªó tr·ª£ kh√°ch h√†ng m·ªôt c√°ch th√¢n thi·ªán, t·ª± nhi√™n v√† chuy√™n nghi·ªáp.
                
                Ng·ªØ c·∫£nh:
                - B·∫°n c√≥ quy·ªÅn truy c·∫≠p v√†o to√†n b·ªô n·ªôi dung h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥, v√¨ v·∫≠y h√£y duy tr√¨ s·ª± m·∫°ch l·∫°c v√† nh·∫•t qu√°n trong c√¢u tr·∫£ l·ªùi.
                - N·∫øu ng∆∞·ªùi d√πng h·ªèi l·∫°i ho·∫∑c nh·∫Øc ƒë·∫øn th√¥ng tin c≈©, h√£y d·ª±a v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i ƒë·ªÉ ph·∫£n h·ªìi ph√π h·ª£p.
                - N·∫øu c√¢u h·ªèi y√™u c·∫ßu d·ªØ li·ªáu th·ªùi gian th·ª±c (v√≠ d·ª•: l·ªãch chi·∫øu, v√©, thanh to√°n...), h√£y s·ª≠ d·ª•ng c√¥ng c·ª• CinemaToolService ƒë·ªÉ l·∫•y d·ªØ li·ªáu thay v√¨ t·ª± suy lu·∫≠n.
                
                Phong c√°ch ph·∫£n h·ªìi:
                - Tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, d·ªÖ hi·ªÉu.
                - Gi·ªØ gi·ªçng ƒëi·ªáu l·ªãch s·ª±, g·∫ßn g≈©i nh∆∞ m·ªôt nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng th·∫≠t.
                - Kh√¥ng nh·∫Øc l·∫°i to√†n b·ªô c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng tr·ª´ khi c·∫ßn thi·∫øt ƒë·ªÉ l√†m r√µ ng·ªØ c·∫£nh.
                """;

        // 6Ô∏è‚É£ X√¢y ng·ªØ c·∫£nh h·ªôi tho·∫°i
        StringBuilder contextBuilder = new StringBuilder();
        for (ChatMessage msg : messages) {
            contextBuilder.append(msg.getSender() == MessageSender.USER ? "Ng∆∞·ªùi d√πng: " : "Chatbot: ")
                    .append(msg.getContent())
                    .append("\n");
        }

        cinemaToolService.resetFlag();

        // 7Ô∏è‚É£ G·ªçi Spring AI (b·∫£n 1.0.3 ch·ªâ c√≥ .user)
        var response = chatClient.prompt()
                .tools(cinemaToolService) // üëà Cho ph√©p model g·ªçi c√°c h√†m @Tool
                .system(systemPrompt + "\n\nD∆∞·ªõi ƒë√¢y l√† h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥:\n" + contextBuilder)
                .user(req.getContent())
                .call();

        String botReply = response.content();

        MessageType type = cinemaToolService.isToolUsed()
                ? MessageType.INTERNAL_API
                : MessageType.AI_GENERATED;

        // 8Ô∏è‚É£ L∆∞u ph·∫£n h·ªìi
        return chatMessageService.saveBotMessage(session,
                botReply != null ? botReply : "Xin l·ªói, t√¥i hi·ªán kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c.",
                type);

    }
}